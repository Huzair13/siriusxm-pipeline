# Dockerfile.codebuild
# FROM public.ecr.aws/codebuild/amazonlinux2-x86_64-standard:5.0

# ARG TF_VERSION=1.5.7
# ENV TF_PLUGIN_CACHE_DIR=/root/.terraform.d/plugin-cache PATH=/usr/local/bin:$PATH

# USER root
# RUN set -e \
#  && mkdir -p /usr/local/bin /tmp/tfinstall \
#  && curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -o /tmp/tfinstall/terraform.zip \
#  && unzip /tmp/tfinstall/terraform.zip -d /usr/local/bin \
#  && terraform -version \
#  && rm -rf /tmp/tfinstall \
#  && mkdir -p "$TF_PLUGIN_CACHE_DIR"


# Dockerfile.codebuild (Final Recommended Version)
# This image prepares your build environment with Terraform and Python tools.

# Dockerfile.codebuild (Final Version with all dependencies)
# This image prepares your build environment with Terraform, Python build tools,
# and all Python packages from requirements.txt.

# Use the official CodeBuild base image for Amazon Linux 2023
FROM public.ecr.aws/codebuild/amazonlinux2-x86_64-standard:5.0

# Define the Terraform version as a build argument
ARG TF_VERSION=1.5.7

# Set environment variables for the system PATH and Terraform's plugin cache
ENV TF_PLUGIN_CACHE_DIR=/root/.terraform.d/plugin-cache \
    PATH=/usr/local/bin:$PATH

# Switch to the root user to install software
USER root

# --- Install Terraform ---
RUN set -e; \
    echo "Installing Terraform v${TF_VERSION}..."; \
    mkdir -p /usr/local/bin /tmp/tfinstall; \
    curl -fsSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -o /tmp/tfinstall/terraform.zip; \
    unzip /tmp/tfinstall/terraform.zip -d /usr/local/bin; \
    terraform -version; \
    rm -rf /tmp/tfinstall; \
    mkdir -p "$TF_PLUGIN_CACHE_DIR";

# --- Install Python Build Tools ---
# This gives us the 'build' command to create the wheel file directly.
RUN set -e; \
    echo "Installing Python build tools..."; \
    yum update -y; \
    yum install -y python3 python3-pip python3-devel gcc; \
    pip3 install --upgrade pip build wheel setuptools;

# --- Install Python Dependencies from requirements.txt ---
# Set the working directory for the copy operation
WORKDIR /app
# Copy the requirements file from your local machine into the image
COPY requirements.txt .
# Install all the packages listed in the file
RUN echo "Installing Python dependencies from requirements.txt..."; \
    pip3 install -r requirements.txt;
# Reset working directory if desired, or leave it as /app
WORKDIR /



# Dockerfile.codebuild-lean
# FROM public.ecr.aws/amazonlinux/amazonlinux:2023

# ARG TF_VERSION=1.5.7
# ENV TF_PLUGIN_CACHE_DIR=/root/.terraform.d/plugin-cache \
#     PATH=/usr/local/bin:$PATH

# USER root

# # Core tools (no 'curl' to avoid conflicts with curl-minimal)
# RUN set -e \
#  && dnf -y update \
#  && dnf -y install --setopt=install_weak_deps=False \
#       unzip tar gzip findutils git jq which shadow-utils util-linux ca-certificates wget \
#  && dnf -y install --setopt=install_weak_deps=False docker \
#  && dnf clean all && rm -rf /var/cache/dnf

# # AWS CLI v2: available as 'awscli' in AL2023 repos. Fallback to official installer if the repo lacks it.
# RUN set -e \
#  && (dnf -y install awscli || true) \
#  || ( \
#       echo "Repo awscli not found, using official installer..." && \
#       mkdir -p /tmp/awscli && \
#       wget -q -O /tmp/awscli/awscli.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" && \
#       unzip -q /tmp/awscli/awscli.zip -d /tmp/awscli && \
#       /tmp/awscli/aws/install && \
#       rm -rf /tmp/awscli \
#     ) \
#  && aws --version

# # Terraform
# RUN set -e \
#  && mkdir -p /tmp/tfinstall \
#  && wget -q -O /tmp/tfinstall/terraform.zip \
#       "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" \
#  && unzip -q /tmp/tfinstall/terraform.zip -d /usr/local/bin \
#  && terraform -version \
#  && rm -rf /tmp/tfinstall \
#  && mkdir -p "${TF_PLUGIN_CACHE_DIR}"
