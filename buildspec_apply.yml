# version: 0.2

# env:
#   variables:
#     TF_PLUGIN_CACHE_DIR: /root/.terraform.d/plugin-cache
#     # Set ARTIFACT_BUCKET in the CodeBuild project / pipeline env
#     # Optionally pass COMMIT_TO_APPLY at build start to apply a specific commit

# phases:
#   install:
#     commands:
#       - yum update -y && yum install -y unzip
#       - curl -sSLO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
#       - unzip -o terraform_1.5.7_linux_amd64.zip && mv terraform /usr/local/bin/
#       - mkdir -p "${TF_PLUGIN_CACHE_DIR}"
#       - terraform version

#   pre_build:
#     commands:
#       - |
#         set -e
#         ARTIFACT_BUCKET=${ARTIFACT_BUCKET:?Set ARTIFACT_BUCKET env var}
#         if [ -n "${COMMIT_TO_APPLY:-}" ]; then
#           COMMIT="$COMMIT_TO_APPLY"
#         else
#           COMMIT=$(aws s3 cp "s3://${ARTIFACT_BUCKET}/runs/latest.txt" - || true)
#         fi
#         if [ -z "$COMMIT" ]; then
#           echo "No COMMIT provided and latest.txt missing. Nothing to apply."; exit 0
#         fi
#         echo "Fetching artifacts for commit: $COMMIT"
#         aws s3 sync "s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/jobs/" jobs/
#         echo "Fetched tree (first 200 lines):" && ls -R jobs | sed -n '1,200p'
#       - |
#         echo "Discovering jobs with saved plans"
#         CHANGED_JOBS=$(find jobs -maxdepth 2 -type f -name tfplan -printf '%h\n' 2>/dev/null | awk -F'/' '{print $2}' | sort -u)
#         echo "Jobs to apply: ${CHANGED_JOBS:-<none>}"
#       - |
#         for job in $CHANGED_JOBS; do
#           [ -d "jobs/$job" ] || continue
#           [ -f "jobs/$job/utils-0.1-py3-none-any.whl" ] || { echo "Missing wheel for $job"; exit 1; }
#           [ -f "jobs/$job/requirements.txt" ] || { echo "Missing requirements.txt for $job"; exit 1; }
#         done

#   build:
#     commands:
#       - |
#         set -e
#         [ -z "$CHANGED_JOBS" ] && echo "No tfplan found. Nothing to apply." && exit 0
#         APPLY_EXIT=0
#         for job in $CHANGED_JOBS; do
#           [ -d "jobs/$job" ] || continue
#           echo "=== Applying $job ==="
#           terraform -chdir="jobs/$job" init -input=false -backend-config=terraform.tfbackend
#           if terraform -chdir="jobs/$job" apply -input=false -no-color tfplan; then
#             echo "Apply OK: $job"
#           else
#             echo "Apply FAILED: $job"
#             APPLY_EXIT=1
#           fi
#         done
#         exit $APPLY_EXIT

# artifacts:
#   files:
#     - jobs/**/tfplan.txt
#     - jobs/**/tfplan.json
#   discard-paths: no

# cache:
#   paths:
#     - /root/.terraform.d/plugin-cache/**


version: 0.2

env:
  variables:
    TF_PLUGIN_CACHE_DIR: "/root/.terraform.d/plugin-cache"
    TF_IN_AUTOMATION: "1"
    # REQUIRED in project/pipeline env:
    #   ARTIFACT_BUCKET=siriusxm-pipeline-artifacts
    # OPTIONAL override at runtime:
    #   COMMIT_TO_APPLY=<commit-sha>

phases:
  install:
    commands:
      - set -euo pipefail
      - yum install -y unzip >/dev/null || (yum update -y && yum install -y unzip)
      - curl -sSLO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      - unzip -o terraform_1.5.7_linux_amd64.zip && mv terraform /usr/local/bin/
      - mkdir -p "${TF_PLUGIN_CACHE_DIR}"
      - terraform version

  pre_build:
    commands:
      - |
        set -euo pipefail
        ARTIFACT_BUCKET=${ARTIFACT_BUCKET:?Set ARTIFACT_BUCKET}
        # Decide which commit to apply
        if [ -n "${COMMIT_TO_APPLY:-}" ]; then
          COMMIT="$COMMIT_TO_APPLY"
        else
          COMMIT="$(aws s3 cp "s3://${ARTIFACT_BUCKET}/runs/latest.txt" - 2>/dev/null || true)"
        fi

        if [ -z "${COMMIT}" ]; then
          echo "No COMMIT provided and latest.txt missing — will skip apply."
          SKIP_APPLY=1
        else
          echo "Fetching artifacts for commit: ${COMMIT}"
          # Pull the whole run so configs + plans for both trees are present
          aws s3 sync "s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/" .
        fi

      # Discover plan directories in jobs/ and sp_jobs/
      - |
        if [ -z "${SKIP_APPLY:-}" ]; then
          PLAN_DIRS=$(find jobs sp_jobs -type f -name tfplan 2>/dev/null | xargs -r -n1 dirname | sort -u)
        fi
        echo "PLAN_DIRS: ${PLAN_DIRS:-<none>}"

      # Validate each plan dir has config & lock & backend files (or fail early)
      - |
        if [ -z "${SKIP_APPLY:-}" ] && [ -n "${PLAN_DIRS:-}" ]; then
          MISSING=0
          for dir in ${PLAN_DIRS}; do
            [ -f "${dir}/terraform.tfbackend" ] || { echo "ERROR: ${dir} missing terraform.tfbackend"; MISSING=1; }
            ls "${dir}"/*.tf >/dev/null 2>&1 || { echo "ERROR: ${dir} has no *.tf files"; MISSING=1; }
            [ -f "${dir}/.terraform.lock.hcl" ] || { echo "ERROR: ${dir} missing .terraform.lock.hcl"; MISSING=1; }
          done
          if [ "${MISSING}" -ne 0 ]; then
            echo "One or more plan directories are missing required files; aborting."
            exit 1
          fi
        fi

      # (Optional) Validate Glue artifacts only for Glue job dirs
      - |
        if [ -z "${SKIP_APPLY:-}" ] && [ -n "${PLAN_DIRS:-}" ]; then
          for dir in ${PLAN_DIRS}; do
            case "${dir}" in
              jobs/*)
                # Enforce presence of Glue artifacts when present for job dirs
                if [ -f "${dir}/requirements.txt" ] || ls "${dir}"/utils-*.whl >/dev/null 2>&1; then
                  [ -f "${dir}/requirements.txt" ] || { echo "ERROR: ${dir} missing requirements.txt"; exit 1; }
                  ls "${dir}"/utils-*.whl >/dev/null 2>&1 || { echo "ERROR: ${dir} missing utils-*.whl"; exit 1; }
                fi
                ;;
            esac
          done
        fi

  build:
    commands:
      - |
        set -euo pipefail
        if [ -n "${SKIP_APPLY:-}" ]; then
          echo "Skipping apply — no commit to apply."
          exit 0
        fi

        if [ -z "${PLAN_DIRS:-}" ]; then
          echo "No tfplan found. Nothing to apply."
          exit 0
        fi

        APPLY_EXIT=0
        : > apply_status.txt

        for dir in ${PLAN_DIRS}; do
          echo "=== Applying ${dir} ==="
          # Ensure module/plugins are wired exactly as plan expects
          terraform -chdir="${dir}" init -input=false -backend-config=terraform.tfbackend -lockfile=readonly
          if terraform -chdir="${dir}" apply -input=false -no-color tfplan; then
            echo "OK  ${dir}" | tee -a apply_status.txt
          else
            echo "FAIL ${dir}" | tee -a apply_status.txt
            APPLY_EXIT=1
          fi
        done

        exit ${APPLY_EXIT}

artifacts:
  files:
    - apply_status.txt
    - jobs/**/tfplan.txt
    - jobs/**/tfplan.json
    - sp_jobs/**/tfplan.txt
    - sp_jobs/**/tfplan.json
  discard-paths: no

cache:
  paths:
    - /root/.terraform.d/plugin-cache/**
