# version: 0.2

# env:
#   variables:
#     TF_PLUGIN_CACHE_DIR: /root/.terraform.d/plugin-cache
#     # Set ARTIFACT_BUCKET in the CodeBuild project / pipeline env
#     # Optionally pass COMMIT_TO_APPLY at build start to apply a specific commit

# phases:
#   install:
#     commands:
#       - yum update -y && yum install -y unzip
#       - curl -sSLO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
#       - unzip -o terraform_1.5.7_linux_amd64.zip && mv terraform /usr/local/bin/
#       - mkdir -p "${TF_PLUGIN_CACHE_DIR}"
#       - terraform version

#   pre_build:
#     commands:
#       - |
#         set -e
#         ARTIFACT_BUCKET=${ARTIFACT_BUCKET:?Set ARTIFACT_BUCKET env var}
#         if [ -n "${COMMIT_TO_APPLY:-}" ]; then
#           COMMIT="$COMMIT_TO_APPLY"
#         else
#           COMMIT=$(aws s3 cp "s3://${ARTIFACT_BUCKET}/runs/latest.txt" - || true)
#         fi
#         if [ -z "$COMMIT" ]; then
#           echo "No COMMIT provided and latest.txt missing. Nothing to apply."; exit 0
#         fi
#         echo "Fetching artifacts for commit: $COMMIT"
#         aws s3 sync "s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/jobs/" jobs/
#         echo "Fetched tree (first 200 lines):" && ls -R jobs | sed -n '1,200p'
#       - |
#         echo "Discovering jobs with saved plans"
#         CHANGED_JOBS=$(find jobs -maxdepth 2 -type f -name tfplan -printf '%h\n' 2>/dev/null | awk -F'/' '{print $2}' | sort -u)
#         echo "Jobs to apply: ${CHANGED_JOBS:-<none>}"
#       - |
#         for job in $CHANGED_JOBS; do
#           [ -d "jobs/$job" ] || continue
#           [ -f "jobs/$job/utils-0.1-py3-none-any.whl" ] || { echo "Missing wheel for $job"; exit 1; }
#           [ -f "jobs/$job/requirements.txt" ] || { echo "Missing requirements.txt for $job"; exit 1; }
#         done

#   build:
#     commands:
#       - |
#         set -e
#         [ -z "$CHANGED_JOBS" ] && echo "No tfplan found. Nothing to apply." && exit 0
#         APPLY_EXIT=0
#         for job in $CHANGED_JOBS; do
#           [ -d "jobs/$job" ] || continue
#           echo "=== Applying $job ==="
#           terraform -chdir="jobs/$job" init -input=false -backend-config=terraform.tfbackend
#           if terraform -chdir="jobs/$job" apply -input=false -no-color tfplan; then
#             echo "Apply OK: $job"
#           else
#             echo "Apply FAILED: $job"
#             APPLY_EXIT=1
#           fi
#         done
#         exit $APPLY_EXIT

# artifacts:
#   files:
#     - jobs/**/tfplan.txt
#     - jobs/**/tfplan.json
#   discard-paths: no

# cache:
#   paths:
#     - /root/.terraform.d/plugin-cache/**


version: 0.2

env:
  variables:
    TF_PLUGIN_CACHE_DIR: /root/.terraform.d/plugin-cache
    TF_IN_AUTOMATION: "1"
    # REQUIRED:
    #   ARTIFACT_BUCKET=siriusxm-pipeline-artifacts
    # OPTIONAL:
    #   COMMIT_TO_APPLY=<commit-sha from plan stage>

phases:
  install:
    commands:
      - |
        set -euo pipefail
        yum install -y unzip >/dev/null || (yum update -y && yum install -y unzip)
        curl -sSLO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip -o terraform_1.5.7_linux_amd64.zip && mv terraform /usr/local/bin/
        mkdir -p "${TF_PLUGIN_CACHE_DIR}"
        terraform version

  pre_build:
    commands:
      - |
        set -euo pipefail
        ARTIFACT_BUCKET=${ARTIFACT_BUCKET:?Set ARTIFACT_BUCKET}

        # Figure out which plan commit to apply
        if [ -n "${COMMIT_TO_APPLY:-}" ]; then
          COMMIT="$COMMIT_TO_APPLY"
        else
          COMMIT="$(aws s3 cp "s3://${ARTIFACT_BUCKET}/runs/latest.txt" - 2>/dev/null || true)"
        fi

        if [ -z "${COMMIT}" ]; then
          echo "No COMMIT provided and latest.txt missing — skipping apply."
          SKIP_APPLY=1
        else
          echo "Plan commit to apply: ${COMMIT}"
        fi

      - |
        # Ensure the working tree matches the plan commit (use GitHub source)
        if [ -z "${SKIP_APPLY:-}" ]; then
          SRC_COMMIT="${CODEBUILD_RESOLVED_SOURCE_VERSION:-unknown}"
          if [ "${SRC_COMMIT}" != "${COMMIT}" ]; then
            echo "Checking out repo to plan commit ${COMMIT} (was ${SRC_COMMIT})"
            git fetch --all --depth=1 || true
            git checkout -f "${COMMIT}"
          else
            echo "Repo is already at plan commit ${COMMIT}"
          fi
        fi

      - |
        # Pull ONLY the necessary artifacts from S3 and overlay onto the repo:
        # - tfplan (+ txt/json for audit)
        # - .terraform.lock.hcl (provider set from plan)
        # - requirements.txt / utils-*.whl (Glue assets)
        if [ -z "${SKIP_APPLY:-}" ]; then
          echo "Fetching minimal artifacts for commit ${COMMIT}"
          # plan_dirs.txt helps us know exactly what to apply; OK if missing
          aws s3 cp "s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/plan_dirs.txt" plan_dirs.txt 2>/dev/null || true

          aws s3 sync "s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/" . \
            --exclude "*" \
            --include "jobs/*/tfplan" \
            --include "jobs/*/tfplan.txt" \
            --include "jobs/*/tfplan.json" \
            --include "jobs/*/.terraform.lock.hcl" \
            --include "jobs/*/requirements.txt" \
            --include "jobs/*/utils-*.whl" \
            --include "sp_jobs/*/tfplan" \
            --include "sp_jobs/*/tfplan.txt" \
            --include "sp_jobs/*/tfplan.json" \
            --include "sp_jobs/*/.terraform.lock.hcl"
        fi

      - |
        # Work out which directories to apply
        if [ -z "${SKIP_APPLY:-}" ]; then
          if [ -f plan_dirs.txt ]; then
            echo "Using plan_dirs.txt"
            PLAN_DIRS="$(sed '/^$/d' plan_dirs.txt | sort -u)"
          else
            echo "Discovering plan directories via tfplan files"
            PLAN_DIRS=$(find jobs sp_jobs -type f -name tfplan 2>/dev/null | xargs -r -n1 dirname | sort -u)
          fi
        fi
        echo "PLAN_DIRS (raw): ${PLAN_DIRS:-<none>}"

      - |
        # Validate: repo provides *.tf and backend; artifacts provided the lock + plan
        if [ -z "${SKIP_APPLY:-}" ] && [ -n "${PLAN_DIRS:-}" ]; then
          VALID_DIRS=""
          for dir in ${PLAN_DIRS}; do
            if ls "${dir}"/*.tf >/dev/null 2>&1 \
               && [ -f "${dir}/terraform.tfbackend" ] \
               && [ -f "${dir}/.terraform.lock.hcl" ] \
               && [ -f "${dir}/tfplan" ]; then
              VALID_DIRS="${VALID_DIRS} ${dir}"
            else
              echo "SKIP ${dir} (missing one of: *.tf, terraform.tfbackend, .terraform.lock.hcl, tfplan)"
            fi
          done
          PLAN_DIRS="$(echo ${VALID_DIRS} | xargs -n1 2>/dev/null | sort -u || true)"
        fi
        echo "PLAN_DIRS (valid): ${PLAN_DIRS:-<none>}"

  build:
    commands:
      - |
        set -euo pipefail
        if [ -n "${SKIP_APPLY:-}" ]; then
          echo "Skipping apply — no commit to apply."
          exit 0
        fi
        if [ -z "${PLAN_DIRS:-}" ]; then
          echo "No valid tfplan directories. Nothing to apply."
          exit 0
        fi

        APPLY_EXIT=0
        : > apply_status.txt

        for dir in ${PLAN_DIRS}; do
          echo "=== Applying ${dir} ==="
          terraform -chdir="${dir}" init -input=false -backend-config=terraform.tfbackend -lockfile=readonly -reconfigure
          if terraform -chdir="${dir}" apply -input=false -no-color tfplan; then
            echo "OK  ${dir}" | tee -a apply_status.txt
          else
            echo "FAIL ${dir}" | tee -a apply_status.txt
            APPLY_EXIT=1
          fi
        done

        echo "==== Apply Summary ===="
        cat apply_status.txt || true

        exit ${APPLY_EXIT}

artifacts:
  files:
    - apply_status.txt
    - jobs/**/tfplan.txt
    - jobs/**/tfplan.json
    - sp_jobs/**/tfplan.txt
    - sp_jobs/**/tfplan.json
  discard-paths: no

cache:
  paths:
    - /root/.terraform.d/plugin-cache/**
