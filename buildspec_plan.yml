# version: 0.2

# env:
#   variables:
#     TF_PLUGIN_CACHE_DIR: /root/.terraform.d/plugin-cache
#     # Set ARTIFACT_BUCKET in the CodeBuild project / pipeline env
#     # ARTIFACT_BUCKET: my-tf-artifacts-bucket

# phases:
#   install:
#     commands:
#       - yum update -y && yum install -y unzip
#       - curl -sSLO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
#       - unzip -o terraform_1.5.7_linux_amd64.zip && mv terraform /usr/local/bin/
#       - mkdir -p "${TF_PLUGIN_CACHE_DIR}"
#       - terraform version
#       - pip install -r requirements.txt

#   pre_build:
#     commands:
#       - echo "Detecting changed jobs"
#       # - docker login --username "$DOCKER_HUB_USERNAME" --password "$DOCKER_HUB_PASSWORD"
#       - git fetch origin "+refs/heads/*:refs/remotes/origin/*" --depth=50 || true
#       - |
#         if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
#           BASE_COMMIT=$(git rev-parse HEAD^)
#           CHANGED_JOBS=$(git diff --name-only "$BASE_COMMIT" HEAD | grep -E '^jobs/[^/]+/' | cut -d'/' -f2 | sort -u)
#         else
#           CHANGED_JOBS=$(ls -1 jobs || true)
#         fi
#       - echo "CHANGED_JOBS=$CHANGED_JOBS"

#       - echo "Build wheels for changed jobs"
#       - |
#         for job in $CHANGED_JOBS; do
#           [ -d "jobs/$job" ] || continue
#           pushd "jobs/$job" >/dev/null
#           rm -rf ./dist ./utils-0.1-py3-none-any.whl
#           docker build -t glue-job-builder .
#           CID=$(docker create glue-job-builder)
#           docker cp "$CID":/out/utils-0.1-py3-none-any.whl ./utils-0.1-py3-none-any.whl
#           docker rm "$CID"
#           popd >/dev/null
#         done

#   build:
#     commands:
#       - |
#         set -e
#         for job in $CHANGED_JOBS; do
#           [ -d "jobs/$job" ] || continue
#           echo "=== Planning $job ==="
#           terraform -chdir="jobs/$job" fmt -recursive
#           terraform -chdir="jobs/$job" init -input=false -backend-config=terraform.tfbackend
#           terraform -chdir="jobs/$job" validate -no-color
#           # plan; allow detailed exit codes without failing the build
#           if terraform -chdir="jobs/$job" plan -no-color -input=false -var-file=terraform.tfvars -out=tfplan -detailed-exitcode; then
#             :
#           else
#             EXIT=$?; [ "$EXIT" -eq 2 ] || exit "$EXIT"
#           fi
#           terraform -chdir="jobs/$job" show -no-color tfplan > "tfplan.txt" || true
#           terraform -chdir="jobs/$job" show -json tfplan > "tfplan.json" || true
#         done

#   post_build:
#     commands:
#       - |
#         set -e
#         ARTIFACT_BUCKET=${ARTIFACT_BUCKET:?Set ARTIFACT_BUCKET env var}
#         COMMIT=${CODEBUILD_RESOLVED_SOURCE_VERSION:-manual-$(date +%s)}
#         echo "Uploading plan artifacts to s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/jobs/"
#         aws s3 sync jobs/ "s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/jobs/" \
#           --exclude "*" \
#           --include "*/tfplan" \
#           --include "*/tfplan.txt" \
#           --include "*/tfplan.json" \
#           --include "*/utils-*.whl" \
#           --include "*/requirements.txt"

#         # Write 'latest.txt' without process substitution
#         printf %s "$COMMIT" | aws s3 cp - "s3://${ARTIFACT_BUCKET}/runs/latest.txt" \
#           --content-type text/plain --cache-control no-store
#         echo "Uploaded artifacts for commit ${COMMIT}"

# artifacts:
#   files:
#     - jobs/**/tfplan
#     - jobs/**/tfplan.txt
#     - jobs/**/tfplan.json
#     - jobs/**/utils-0.1-py3-none-any.whl
#     - jobs/**/requirements.txt
#   discard-paths: no

# cache:
#   paths:
#     - /root/.terraform.d/plugin-cache/**





version: 0.2

env:
  variables:
    TF_PLUGIN_CACHE_DIR: "/root/.terraform.d/plugin-cache"
    TF_IN_AUTOMATION: "1"
    # REQUIRED in CodeBuild env:
    #   ARTIFACT_BUCKET=siriusxm-pipeline-artifacts
    # OPTIONAL at runtime:
    #   COMMIT_TO_APPLY=<commit-sha>

phases:
  install:
    commands:
      - set -euo pipefail
      - yum install -y unzip >/dev/null || (yum update -y && yum install -y unzip)
      - curl -sSLO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      - unzip -o terraform_1.5.7_linux_amd64.zip && mv terraform /usr/local/bin/
      - mkdir -p "${TF_PLUGIN_CACHE_DIR}"
      - terraform version

  pre_build:
    commands:
      - |
        set -euo pipefail
        ARTIFACT_BUCKET=${ARTIFACT_BUCKET:?Set ARTIFACT_BUCKET}

        # Decide commit to apply
        if [ -n "${COMMIT_TO_APPLY:-}" ]; then
          COMMIT="$COMMIT_TO_APPLY"
        else
          COMMIT="$(aws s3 cp "s3://${ARTIFACT_BUCKET}/runs/latest.txt" - 2>/dev/null || true)"
        fi

        if [ -z "${COMMIT}" ]; then
          echo "No COMMIT provided and latest.txt missing — will skip apply."
          SKIP_APPLY=1
        else
          echo "Fetching artifacts for commit: ${COMMIT}"
          # Pull the entire run so configs + plans are present
          aws s3 sync "s3://${ARTIFACT_BUCKET}/runs/${COMMIT}/" .
        fi

      # Determine plan dirs from manifest (preferred) or by discovering tfplan files
      - |
        if [ -z "${SKIP_APPLY:-}" ]; then
          if [ -f plan_dirs.txt ]; then
            echo "Using plan_dirs.txt"
            PLAN_DIRS="$(sed '/^$/d' plan_dirs.txt | sort -u)"
          else
            echo "Discovering plan directories via tfplan files"
            PLAN_DIRS=$(find jobs sp_jobs -type f -name tfplan 2>/dev/null | xargs -r -n1 dirname | sort -u)
          fi
        fi
        echo "PLAN_DIRS: ${PLAN_DIRS:-<none>}"

      # Validate each plan dir has required files
      - |
        if [ -z "${SKIP_APPLY:-}" ] && [ -n "${PLAN_DIRS:-}" ]; then
          MISSING=0
          for dir in ${PLAN_DIRS}; do
            [ -f "${dir}/terraform.tfbackend" ] || { echo "ERROR: ${dir} missing terraform.tfbackend"; MISSING=1; }
            ls "${dir}"/*.tf >/dev/null 2>&1   || { echo "ERROR: ${dir} has no *.tf files"; MISSING=1; }
            [ -f "${dir}/.terraform.lock.hcl" ] || { echo "ERROR: ${dir} missing .terraform.lock.hcl"; MISSING=1; }
          done
          if [ "${MISSING}" -ne 0 ]; then
            echo "One or more plan directories are missing required files; aborting."
            exit 1
          fi
        fi

      # Optional: enforce Glue artifacts presence when those markers exist
      - |
        if [ -z "${SKIP_APPLY:-}" ] && [ -n "${PLAN_DIRS:-}" ]; then
          for dir in ${PLAN_DIRS}; do
            case "${dir}" in
              jobs/*)
                if [ -f "${dir}/requirements.txt" ] || ls "${dir}"/utils-*.whl >/dev/null 2>&1; then
                  [ -f "${dir}/requirements.txt" ] || { echo "ERROR: ${dir} missing requirements.txt"; exit 1; }
                  ls "${dir}"/utils-*.whl >/dev/null 2>&1 || { echo "ERROR: ${dir} missing utils-*.whl"; exit 1; }
                fi
                ;;
            esac
          done
        fi

  build:
    commands:
      - |
        set -euo pipefail
        if [ -n "${SKIP_APPLY:-}" ]; then
          echo "Skipping apply — no commit to apply."
          exit 0
        fi

        if [ -z "${PLAN_DIRS:-}" ]; then
          echo "No tfplan found. Nothing to apply."
          exit 0
        fi

        APPLY_EXIT=0
        : > apply_status.txt

        for dir in ${PLAN_DIRS}; do
          echo "=== Applying ${dir} ==="
          # Use the exact provider selections from lockfile
          terraform -chdir="${dir}" init -input=false -backend-config=terraform.tfbackend -lockfile=readonly
          if terraform -chdir="${dir}" apply -input=false -no-color tfplan; then
            echo "OK  ${dir}" | tee -a apply_status.txt
          else
            echo "FAIL ${dir}" | tee -a apply_status.txt
            APPLY_EXIT=1
          fi
        done

        exit ${APPLY_EXIT}

artifacts:
  files:
    - apply_status.txt
    - plan_dirs.txt
    - jobs/**/tfplan.txt
    - jobs/**/tfplan.json
    - sp_jobs/**/tfplan.txt
    - sp_jobs/**/tfplan.json
  discard-paths: no

cache:
  paths:
    - /root/.terraform.d/plugin-cache/**
