version: 0.2

env:
  variables:
    TF_PLUGIN_CACHE_DIR: /root/.terraform.d/plugin-cache
  # Ensure CODEBUILD_SRC_DIR is the primary source
  # and AWS_DEFAULT_REGION is set in the CodeBuild project env.

phases:
  install:
    commands:
      - echo "Installing unzip"
      - yum update -y
      - yum install -y unzip
      - rm -rf terraform
      - curl -sSLO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      - unzip -o terraform_1.5.7_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - terraform version
      - mkdir -p "${TF_PLUGIN_CACHE_DIR}"
      - pip install -r requirements.txt

  pre_build:
    commands:
      - echo "Logging in to Docker Hub"
      - docker login --username "$DOCKER_HUB_USERNAME" --password "$DOCKER_HUB_PASSWORD"

      - echo "Preparing git history to detect changed jobs"
      - git fetch --no-tags --prune --depth=2 origin || true
      - |
        if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
          # Compare last two commits; fallback to origin/main if needed
          BASE_COMMIT=$(git rev-parse HEAD^)
          CHANGED_JOBS=$(git diff --name-only "$BASE_COMMIT" HEAD | grep "^jobs/" | cut -d "/" -f2 | sort -u)
        else
          echo "First build or shallow clone without parent. Processing all jobs."
          CHANGED_JOBS=$(ls -1 jobs || true)
        fi
        echo "Changed jobs: $CHANGED_JOBS"

      - echo "Building Python wheel artifacts with Docker for each changed job..."
      - |
        for job in $CHANGED_JOBS; do
          [ -d "jobs/$job" ] || continue
          echo "Building wheel for $job"
          pushd "jobs/$job" >/dev/null
          rm -rf ./dist ./utils-0.1-py3-none-any.whl
          docker build -t glue-job-builder .
          CID=$(docker create glue-job-builder)
          docker cp "$CID":/out/utils-0.1-py3-none-any.whl ./utils-0.1-py3-none-any.whl
          docker rm "$CID"
          popd >/dev/null
        done

  build:
    commands:
      - echo "Running Terraform fmt/validate/plan for changed jobs"
      - |
        set -e
        PLAN_EXIT=0
        for job in $CHANGED_JOBS; do
          [ -d "jobs/$job" ] || continue
          echo "=== Processing job: $job ==="

          # Lint
          terraform -chdir="jobs/$job" fmt -check -diff -recursive

          # Init (use backend config file present in each job)
          terraform -chdir="jobs/$job" init -input=false -backend-config=terraform.tfbackend

          # Validate
          terraform -chdir="jobs/$job" validate -no-color

          # Plan with detailed exit codes: 0=no changes, 2=changes, 1=error
          if terraform -chdir="jobs/$job" plan -no-color -input=false -var-file=terraform.tfvars -out=tfplan -detailed-exitcode; then
            EXIT=$?
          else
            EXIT=$?
          fi

          # Always render a human and JSON plan for artifacting
          terraform -chdir="jobs/$job" show -no-color tfplan > "tfplan.txt" || true
          terraform -chdir="jobs/$job" show -json tfplan > "tfplan.json" || true

          # Track non-fatal (exit 2) vs fatal (exit 1)
          if [ "$EXIT" -eq 1 ]; then
            echo "Terraform plan failed for $job"
            PLAN_EXIT=1
          elif [ "$EXIT" -eq 2 ]; then
            echo "Changes detected for $job"
          else
            echo "No changes for $job"
          fi
        done
        exit $PLAN_EXIT

artifacts:
  files:
    - jobs/**/tfplan
    - jobs/**/tfplan.txt
    - jobs/**/tfplan.json
  discard-paths: no

cache:
  paths:
    - /root/.terraform.d/plugin-cache/**

