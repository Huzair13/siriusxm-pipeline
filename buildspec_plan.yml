version: 0.2

env:
  variables:
    TF_IN_AUTOMATION: "1"
    TF_PLUGIN_CACHE_DIR: "/root/.terraform.d/plugin-cache"

phases:
  install:
    commands:
      - echo "Installing unzip"
      - yum update -y
      - yum install -y unzip
      - rm -rf terraform
      - "curl -O https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip"
      - "unzip terraform_1.5.7_linux_amd64.zip"
      - "mv terraform /usr/local/bin/"
      - "terraform version"
      - pip install -r requirements.txt

  pre_build:
    commands:
      - echo "Docker Hub login (optional)"
      - |
        if [ -n "${DOCKER_HUB_USERNAME:-}" ] && [ -n "${DOCKER_HUB_PASSWORD:-}" ]; then
          echo "$DOCKER_HUB_PASSWORD" | docker login --username "$DOCKER_HUB_USERNAME" --password-stdin
        else
          echo "Skipping docker login (no creds)"
        fi

      - echo "Detecting changed jobs (Terraform) and jobs with src changes (Docker build)"
      - |
        set -euo pipefail

        # Compute diff base (handles first commit safely)
        if git rev-parse --verify "${CODEBUILD_RESOLVED_SOURCE_VERSION}^" >/dev/null 2>&1; then
          DIFF_RANGE="${CODEBUILD_RESOLVED_SOURCE_VERSION}^ ${CODEBUILD_RESOLVED_SOURCE_VERSION}"
        else
          DIFF_RANGE=""
        fi

        if [ -n "$DIFF_RANGE" ]; then
          # Any change under jobs/<job>/ triggers Terraform
          CHANGED_JOBS="$(
            git diff --name-only $DIFF_RANGE \
            | awk -F/ '/^jobs\// {print $2}' | sort -u
          )"

          # Only changes under jobs/<job>/src/ trigger Docker build
          CHANGED_JOBS_SRC="$(
            git diff --name-only $DIFF_RANGE \
            | awk -F/ '/^jobs\/[^/]+\/src\// {print $2}' | sort -u
          )"
        else
          echo "First commit detected."
          # Terraform: plan all job folders
          CHANGED_JOBS="$(ls -1 jobs 2>/dev/null || true)"
          # Docker: only build for jobs that have a src/ tree
          CHANGED_JOBS_SRC="$(find jobs -maxdepth 2 -type d -name src -printf '%h\n' 2>/dev/null | awk -F/ '{print $2}' | sort -u)"
        fi

        echo "CHANGED_JOBS=${CHANGED_JOBS:-}"       | tee .changed_jobs.env
        echo "CHANGED_JOBS_SRC=${CHANGED_JOBS_SRC:-}" | tee .changed_jobs_src.env

        echo "Changed jobs (Terraform): ${CHANGED_JOBS:-<none>}"
        echo "Changed jobs with src changes (Docker): ${CHANGED_JOBS_SRC:-<none>}"

      - echo "Building Python wheels ONLY for jobs with src changes..."
      - |
        set -euo pipefail
        [ -f .changed_jobs_src.env ] && source .changed_jobs_src.env || true

        # Nothing to build? Skip cleanly.
        if [ -z "${CHANGED_JOBS_SRC:-}" ]; then
          echo "No src changes detected. Skipping Docker wheel builds."
        else
          for job in ${CHANGED_JOBS_SRC}; do
            [ -d "jobs/$job" ] || { echo "Skip $job (no dir)"; continue; }
            echo "➡️  Building wheel for jobs/$job"
            pushd "jobs/$job" >/dev/null
            rm -rf ./dist ./utils-0.1-py3-none-any.whl
            docker build -t glue-job-builder .
            CID=$(docker create glue-job-builder)
            docker cp "$CID:/out/utils-0.1-py3-none-any.whl" ./utils-0.1-py3-none-any.whl
            docker rm "$CID"
            popd >/dev/null
          done
        fi

  build:
    commands:
      - echo "Running terraform PLAN per changed job"
      - |
        set -euo pipefail
        [ -f .changed_jobs.env ] && source .changed_jobs.env || true

        # No job changes? Exit gracefully.
        if [ -z "${CHANGED_JOBS:-}" ]; then
          echo "No job changes detected. Nothing to plan."
          exit 0
        fi

        for job in ${CHANGED_JOBS}; do
          [ -d "jobs/$job" ] || { echo "Skip $job (no dir)"; continue; }
          echo "🛠  Processing job: $job"

          terraform -chdir="jobs/$job" init \
            -input=false -upgrade \
            -backend-config=terraform.tfbackend

          terraform -chdir="jobs/$job" validate -no-color

          terraform -chdir="jobs/$job" plan \
            -input=false -no-color \
            -var-file=terraform.tfvars \
            -out=tfplan

          # IMPORTANT: show/apply from the SAME dir
          terraform -chdir="jobs/$job" show -no-color tfplan
        done

artifacts:
  files:
    - jobs/**/tfplan
