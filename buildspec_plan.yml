version: 0.2

phases:
  install:
    commands:
      - echo "Installing unzip"
      - yum update -y
      - yum install -y unzip
      - rm -rf terraform
      - "curl -O https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip"
      - "unzip terraform_1.5.7_linux_amd64.zip"
      - "mv terraform /usr/local/bin/"
      - "terraform version"
      - pip install -r requirements.txt

  pre_build:
    commands:
      - echo "Detecting changed jobs for PLAN"
      - |
        # Check if a previous commit exists (handles the first commit case)
        if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
          # If a parent commit exists, use git diff to find changed jobs
          CHANGED_JOBS=$(git diff --name-only ${CODEBUILD_RESOLVED_SOURCE_VERSION}^ ${CODEBUILD_RESOLVED_SOURCE_VERSION} \
            | grep "^jobs/" | cut -d "/" -f2 | sort | uniq)
        else
          # If this is the first commit, assume all jobs are new
          echo "This appears to be the first commit. Processing all jobs."
          CHANGED_JOBS=$(ls jobs)
        fi
        echo "Changed jobs: $CHANGED_JOBS"

  build:
    commands:
      - echo "Running terraform PLAN in each changed job"
      - |
        for job in $CHANGED_JOBS; do
          echo "Processing job: $job"
          # Use the -chdir flag to run Terraform from the job's directory
          # This keeps the shell at the root, making module paths consistent
          terraform -chdir=jobs/$job init -backend-config=codepipeline.tfbackend
          terraform -chdir=jobs/$job plan -var-file=codepipeline.tfvars -out=tfplan
          
          # Check if the tfplan file was successfully created before trying to show it
          if [ -f "jobs/$job/tfplan" ]; then
            terraform show jobs/$job/tfplan
          else
            echo "Failed to create tfplan file for job: $job"
          fi
        done

artifacts:
  files:
    - jobs/**/tfplan
