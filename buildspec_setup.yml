version: 0.2

env:
  variables:
    MANIFEST_BUCKET: "terraform-state-talend-migrations-us-east-1"                 # e.g., my-ci-state-bucket
    MANIFEST_KEY: "glue/setup/initialized-jobs.json"
    JOBS: ""                            # optional override: "job_6 job_7" or "job_6,job_7"
    DRY_RUN: "false"                    # set "true" to preview

phases:
  install:
    commands:
      - set -euo pipefail
      - echo "Python: $(python3 --version || true)"
      - echo "Pip: $(pip3 --version || true)"
      - if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
      - |
        if ! aws --version >/dev/null 2>&1; then
          echo "awscli not found; installing..."
          pip3 install awscli
        fi
      - |
        if [ -z "${MANIFEST_BUCKET}" ]; then
          echo "ERROR: MANIFEST_BUCKET is not set."
          exit 1
        fi
        echo "State manifest: s3://${MANIFEST_BUCKET}/${MANIFEST_KEY}"

  pre_build:
    commands:
      - echo "Resolving jobs to initialize (one-time setup)â€¦"
      # Normalize optional override from env
      - JOBS_FROM_ENV="$(echo "${JOBS}" | tr ',' ' ' | xargs || true)"
      # List current job folders in repo
      - |
        list_all_jobs() {
          if [ -d jobs ]; then
            # prefer 'find' with -printf; fallback to ls if -printf unsupported
            find jobs -mindepth 1 -maxdepth 1 -type d -printf '%f\n' 2>/dev/null \
              || ls -d jobs/*/ 2>/dev/null | xargs -n1 basename
          fi
        }
        JOBS_ALL="$(list_all_jobs || true)"
        echo "Found job folders: ${JOBS_ALL:-<none>}"

      # Pull manifest from S3 (create empty if missing)
      - |
        TMP_MANIFEST="/tmp/initialized-jobs.json"
        if aws s3api head-object --bucket "${MANIFEST_BUCKET}" --key "${MANIFEST_KEY}" >/dev/null 2>&1; then
          aws s3 cp "s3://${MANIFEST_BUCKET}/${MANIFEST_KEY}" "${TMP_MANIFEST}"
          echo "Loaded existing manifest."
        else
          echo '[]' > "${TMP_MANIFEST}"
          echo "No manifest found; starting fresh."
        fi
        echo "Current manifest contents:"; cat "${TMP_MANIFEST}"

      # Compute NEW jobs = current folders - already-initialized (unless override provided)
      - |
        if [ -n "${JOBS_FROM_ENV}" ]; then
          JOB_LIST="${JOBS_FROM_ENV}"
          SOURCE="override (env:JOBS)"
        else
          # parse JSON array -> space list
          INIT_JOBS="$(python3 - <<'PY'
          import json,sys
          data=json.load(open("/tmp/initialized-jobs.json"))
          print(" ".join(sorted(set(data))))
          PY
        )"
          echo "Already initialized: ${INIT_JOBS:-<none>}"
          # set difference
          JOB_LIST="$(python3 - <<'PY'
        import sys,subprocess,shlex
        def to_set(s): return set(s.split()) if s.strip() else set()
        # read shell env via os
        import os
        jobs_all=os.environ.get("JOBS_ALL","")
        init_jobs=os.environ.get("INIT_JOBS","")
        new = to_set(jobs_all) - to_set(init_jobs)
        print(" ".join(sorted(new)))
        PY
        )"
          SOURCE="detected new folders (uninitialized)"
        fi

        if [ -z "${JOB_LIST:-}" ]; then
          echo "No new jobs to initialize."
          if [ "${DRY_RUN}" = "true" ]; then exit 0; fi
          # nothing to do; exit successfully so manual trigger doesn't fail
          exit 0
        fi

        echo "Job source: ${SOURCE}"
        echo "Jobs to initialize: ${JOB_LIST}"

  build:
    commands:
      - |
        echo "Executing setup_glue_job.py for: ${JOB_LIST}"
        if [ "${DRY_RUN}" = "true" ]; then
          echo "[DRY RUN] python3 setup_glue_job.py ${JOB_LIST}"
        else
          python3 setup_glue_job.py ${JOB_LIST}
        fi

  post_build:
    commands:
      - |
        if [ "${DRY_RUN}" = "true" ]; then
          echo "[DRY RUN] Skipping manifest update."
          exit 0
        fi
        # Merge newly initialized jobs into manifest and push to S3
        python3 - "$JOBS" "$JOBS_ALL" "$JOB_LIST" <<'PY'
        import json, os, sys
        tmp = "/tmp/initialized-jobs.json"
        with open(tmp) as f: cur = set(json.load(f))
        job_list = set(os.environ.get("JOB_LIST","").split())
        cur |= job_list
        with open(tmp, "w") as f: json.dump(sorted(cur), f)
        print("Updated manifest:", sorted(cur))
        PY
        cat /tmp/initialized-jobs.json
        aws s3 cp /tmp/initialized-jobs.json "s3://${MANIFEST_BUCKET}/${MANIFEST_KEY}"

artifacts:
  files:
    - '**/*'
  discard-paths: no
